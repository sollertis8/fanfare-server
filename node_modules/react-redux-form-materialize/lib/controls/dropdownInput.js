'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _omit = require('lodash/omit');

var _omit2 = _interopRequireDefault(_omit);

var _map = require('lodash/map');

var _map2 = _interopRequireDefault(_map);

var _inputHelpers = require('../helpers/inputHelpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const defaultUlStyle = {
  position: 'absolute',
  top: 0,
  left: 0,
  opacity: 1,
  width: '100%'
};

function renderChild(dropdownInput, { props: { disabled, value, children } }) {
  const { innerState } = dropdownInput.props;

  const liClass = (0, _classnames2.default)({
    disabled,
    active: value === innerState.value,
    selected: value === innerState.value
  });

  return _react2.default.createElement(
    'li',
    { className: liClass, key: value, 'data-value': value, 'data-disabled': disabled,
      onMouseDown: dropdownInput.onDropdownClick },
    _react2.default.createElement(
      'span',
      null,
      children
    )
  );
}

const defaultCaret = _react2.default.createElement(
  'span',
  { className: 'caret' },
  '\u25BC'
);

class DropdownInput extends _react2.default.Component {

  constructor(props) {
    super(props);

    this.onPageClick = () => {
      this.setState({ showSelect: false });
    };

    this.onShow = () => {
      if (this.props.disabled) {
        return;
      }
      this.setState({ showSelect: true });
    };

    this.onDropdownClick = evnt => {
      evnt.stopPropagation();
      const { currentTarget: { dataset: { value, disabled } } } = evnt;
      if (disabled) {
        return;
      }
      this.setState({ showSelect: false });
      this.props.onChange(value);
    };

    this.onPreventPropagation = evnt => {
      evnt.stopPropagation();
    };

    this.state = { showSelect: false };
  }

  componentDidMount() {
    if (typeof window !== 'undefined') {
      window.addEventListener('mousedown', this.onPageClick, false);
    }
  }

  componentWillUnmount() {
    if (typeof window !== 'undefined') {
      window.removeEventListener('mousedown', this.onPageClick);
    }
  }

  render() {
    const { props } = this;
    const { showSelect } = this.state;

    const errors = (0, _inputHelpers.getErrors)(props);

    const fieldClassName = (0, _classnames2.default)('input-field', props.className);

    const disabled = props.disabled ? 'disabled' : false;

    const iconColor = (0, _inputHelpers.getIconColor)(props);

    const selectWrapperClassName = (0, _classnames2.default)('select-wrapper', props.selectClassName);

    const inputClassName = (0, _classnames2.default)('select-dropdown', 'validate', 'active', {
      invalid: errors.length
    }, props.inputClassName);

    const ulClassName = (0, _classnames2.default)('dropdown-content', 'select-dropdown', 'active', props.ulClassName);

    const labelClassName = (0, _inputHelpers.getLabelClassName)(props, errors);

    const ulStyle = Object.assign({
      display: showSelect ? 'block' : 'none'
    }, defaultUlStyle);

    const selectProps = (0, _omit2.default)(props, ['placeholder', 'innerState', 'iconPrefix', 'className', 'selectClassName', 'messages', 'iconFactory', 'selectTagClassName', 'inputClassName', 'caretClassName', 'ulClassName', 'renderChild', 'caret']);

    selectProps.className = props.selectTagClassName;

    const selectedItem = props.value ? props.children.find(chld => chld.props.value.toString() === props.value.toString()) : undefined;

    const labelStyle = {
      top: errors.length ? '60px' : '0.8rem'
    };

    const PrefixIcon = props.iconPrefix ? props.iconFactory(props.iconPrefix) : undefined;

    return _react2.default.createElement(
      'div',
      { className: fieldClassName },
      PrefixIcon && _react2.default.createElement(PrefixIcon, { style: { left: '0px' }, className: 'prefix', color: iconColor }),
      _react2.default.createElement(
        'div',
        { className: selectWrapperClassName, onMouseDown: this.onPreventPropagation },
        this.props.caret,
        _react2.default.createElement('input', { type: 'text',
          className: inputClassName,
          readOnly: true,
          disabled: disabled,
          onClick: this.onShow,
          value: selectedItem && selectedItem.props.children
        }),
        _react2.default.createElement(
          'ul',
          { className: ulClassName, style: ulStyle },
          (0, _map2.default)(props.children, childProps => this.props.renderChild(this, childProps))
        ),
        _react2.default.createElement(
          'select',
          (0, _extends3.default)({}, selectProps, { disabled: disabled }),
          props.children
        )
      ),
      _react2.default.createElement(
        'label',
        { htmlFor: props.id, className: labelClassName, style: labelStyle,
          'data-error': errors },
        props.placeholder
      )
    );
  }
}
exports.default = DropdownInput;
DropdownInput.propTypes = {
  innerState: _propTypes2.default.object.isRequired,
  iconPrefix: _propTypes2.default.string,
  iconFactory: _propTypes2.default.func,
  messages: _propTypes2.default.object,
  selectClassName: _propTypes2.default.string,
  selectTagClassName: _propTypes2.default.string,
  inputClassName: _propTypes2.default.string,
  caretClassName: _propTypes2.default.string,
  renderChild: _propTypes2.default.func.isRequired,
  caret: _propTypes2.default.element
};
DropdownInput.defaultProps = {
  renderChild,
  caret: defaultCaret
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,